from typing import Any, Text, Dict, List
from rasa_sdk import Action, Tracker
from rasa_sdk.events import SlotSet
from rasa_sdk.executor import CollectingDispatcher
import logging
import sqlite3

logger = logging.getLogger(__name__)


class ActionSaveUserData(Action):
    def name(self) -> Text:
        return "action_save_user_data"

    async def run(
            self,
            dispatcher: CollectingDispatcher,
            tracker: Tracker,
            domain: Dict[Text, Any]
    ) -> List[Dict[Text, Any]]:

        user_id = str(tracker.sender_id)

        # –õ–æ–≥–∏—Ä—É–µ–º –≤—Å–µ —Å—É—â–Ω–æ—Å—Ç–∏
        entities = tracker.latest_message.get("entities", [])
        logger.debug(f"Entities found: {entities}")

        # –ò–∑–≤–ª–µ–∫–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è
        name = next((e["value"] for e in entities if e["entity"] == "user_name"), None)
        city = next((e["value"] for e in entities if e["entity"] == "user_city"), None)

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø—É—Å—Ç—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
        if not name and not city:
            dispatcher.utter_message("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è")
            return []

        # –ü–æ–ª—É—á–∞–µ–º –∏–∑ —Å–ª–æ—Ç–æ–≤, –µ—Å–ª–∏ —Å—É—â–Ω–æ—Å—Ç–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã
        name = name or tracker.get_slot("user_name")  
        city = city or tracker.get_slot("user_city")

        logger.info(f"User ID: {user_id}")
        logger.info(f"Extracted city: {city}")

        try:
            with sqlite3.connect('C:/Users/dimak/Desktop/plitech/6 sem/II/chat_bot_4/user_data.db') as conn:
                cursor = conn.cursor()

                # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –∑–∞–ø–∏—Å–∏
                cursor.execute("SELECT 1 FROM users WHERE user_id = ?", (user_id,))
                exists = cursor.fetchone()

                if exists:
                    # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ
                    query = '''
                                UPDATE users 
                                SET name = COALESCE(?, name), 
                                    city = COALESCE(?, city)
                                WHERE user_id = ?
                            '''
                    cursor.execute(query, (name, city, user_id))
                else:
                    # –ù–æ–≤–∞—è –∑–∞–ø–∏—Å—å
                    cursor.execute('''
                                INSERT INTO users (user_id, name, city)
                                VALUES (?, ?, ?)
                            ''', (user_id, name, city))

                conn.commit()
                dispatcher.utter_message("‚úÖ –î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã!")

        except Exception as e:
            logger.error(f"Database error: {str(e)}")
            dispatcher.utter_message("üòû –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö")

        return [
            SlotSet("user_name", name),  
            SlotSet("user_city", city)  
        ]



class ActionGetProfile(Action):
    def name(self) -> Text:
        return "action_get_profile"

    async def run(
            self,
            dispatcher: CollectingDispatcher,
            tracker: Tracker,
            domain: Dict[Text, Any]
    ) -> List[Dict[Text, Any]]:

        user_id = str(tracker.sender_id)
        logger.info(f"Current user_id: {user_id}")

        try:
            with sqlite3.connect('C:/Users/dimak/Desktop/plitech/6 sem/II/chat_bot_4/user_data.db') as conn:
                # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
                cursor = conn.cursor()
                cursor.execute('''
                    CREATE TABLE IF NOT EXISTS users (
                        user_id TEXT PRIMARY KEY,
                        name TEXT,
                        city TEXT
                    )
                ''')
                conn.commit()

                # –ü–æ–∏—Å–∫ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                cursor.execute('''
                    SELECT name, city 
                    FROM users 
                    WHERE user_id = ?
                ''', (user_id,))

                result = cursor.fetchone()

                events = []
                if result:
                    name, city = result
                    intent_name = tracker.latest_message['intent']['name']

                    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–ª–æ—Ç—ã –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
                    events.append(SlotSet("user_name", name))
                    events.append(SlotSet("user_city", city))

                    # –û—Ç–≤–µ—Ç –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∏–Ω—Ç–µ–Ω—Ç–∞
                    if intent_name == 'ask_name':
                        dispatcher.utter_message(f"üë§ –í–∞—Å –∑–æ–≤—É—Ç: {name}")
                    elif intent_name == 'ask_city':
                        dispatcher.utter_message(f"üèôÔ∏è –í–∞—à –≥–æ—Ä–æ–¥: {city}")
                    else:
                        dispatcher.utter_message(f"üìù –ü—Ä–æ—Ñ–∏–ª—å: {name}, {city}")
                else:
                    dispatcher.utter_message("‚ùå –í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –∏–º—è –∏ –≥–æ—Ä–æ–¥.")

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: {str(e)}")
            dispatcher.utter_message("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö")
            return []

        return events
