
from rasa_sdk import Action, Tracker
from rasa_sdk.executor import CollectingDispatcher
from transformers import pipeline
import random
import re  # –î–æ–±–∞–≤—å—Ç–µ —ç—Ç—É —Å—Ç—Ä–æ–∫—É
import logging
from typing import Text, Dict, List, Any

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ª–æ–≥–≥–µ—Ä–∞
logger = logging.getLogger(__name__)

# –ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–∏ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Ç–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏
sentiment_analyzer = pipeline(
    "sentiment-analysis",
    model="blanchefort/rubert-base-cased-sentiment"
)

class ActionAnalyzeMood(Action):
    def name(self) -> Text:
        return "action_analyze_mood"

    def run(
            self,
            dispatcher: CollectingDispatcher,
            tracker: Tracker,
            domain: Dict[Text, Any]
    ) -> List[Dict[Text, Any]]:

        text = tracker.latest_message.get('text', '')
        cleaned_text = self.preprocess_text(text)

        try:
            result = sentiment_analyzer(cleaned_text, truncation=True)[0]
            label = result['label']
            score = result['score']

            # –î–µ—Ç–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã
            responses = {
                'POSITIVE': {
                    'high_confidence': [
                        "–í–∞—à–∞ —Ä–∞–¥–æ—Å—Ç—å –∑–∞—Ä–∞–∑–∏—Ç–µ–ª—å–Ω–∞! üåà –ß–µ–º –ø–æ—Ä–∞–¥–æ–≤–∞—Ç—å –≤–∞—Å –µ—â—ë?",
                        "–¢–∞–∫ –¥–µ—Ä–∂–∞—Ç—å! –û—Ç–ª–∏—á–Ω–æ–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ - –∑–∞–ª–æ–≥ —É—Å–ø–µ—Ö–∞!"
                    ],
                    'low_confidence': [
                        "–ö–∞–∂–µ—Ç—Å—è, –≤—ã –≤ —Ö–æ—Ä–æ—à–µ–º —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–∏ –¥—É—Ö–∞?",
                        "–£–ª–æ–≤–∏–ª –ø–æ–∑–∏—Ç–∏–≤–Ω—ã–µ –Ω–æ—Ç–∫–∏. –†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –ø–æ–¥—Ä–æ–±–Ω–µ–µ?"
                    ]
                },
                'NEGATIVE': {
                    'high_confidence': [
                        "–í–∏–∂—É, —á—Ç–æ –≤–∞–º —Ç—è–∂–µ–ª–æ... –•–æ—Ç–∏—Ç–µ –æ–± —ç—Ç–æ–º –ø–æ–≥–æ–≤–æ—Ä–∏—Ç—å? üíî",
                        "–ú–Ω–µ –∂–∞–ª—å, —á—Ç–æ –≤—ã —Ç–∞–∫ —Å–µ–±—è —á—É–≤—Å—Ç–≤—É–µ—Ç–µ. –ß–µ–º –ø–æ–º–æ—á—å?"
                    ],
                    'low_confidence': [
                        "–ö–∞–∂–µ—Ç—Å—è, —á—Ç–æ-—Ç–æ –±–µ—Å–ø–æ–∫–æ–∏—Ç? –ú–æ–∂–µ—Ç–µ –ø–æ–¥–µ–ª–∏—Ç—å—Å—è?",
                        "–ó–∞–º–µ—Ç–∏–ª –Ω–µ–≥–∞—Ç–∏–≤–Ω—ã–µ –Ω–æ—Ç—ã. –ù—É–∂–Ω–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∞?"
                    ]
                },
                'NEUTRAL': [
                    "–ü–æ–Ω—è–ª –≤–∞—Å. –•–æ—Ç–∏—Ç–µ –æ–±—Å—É–¥–∏—Ç—å —á—Ç–æ-—Ç–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–µ?",
                    "–†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –±–æ–ª—å—à–µ, —á—Ç–æ–±—ã —è –ª—É—á—à–µ –ø–æ–Ω—è–ª –≤–∞—à–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ."
                ]
            }

            # –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π –≤—ã–±–æ—Ä –æ—Ç–≤–µ—Ç–∞
            if label in ['POSITIVE', 'NEGATIVE']:
                confidence_key = 'high_confidence' if score >= 0.8 else 'low_confidence'
                response = random.choice(responses[label][confidence_key])
            else:
                response = random.choice(responses['NEUTRAL'])

            dispatcher.utter_message(text=response)

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è: {str(e)}")
            dispatcher.utter_message(text="–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ–ø–∏—Å–∞—Ç—å –µ–≥–æ –¥—Ä—É–≥–∏–º–∏ —Å–ª–æ–≤–∞–º–∏.")

        return []

    def preprocess_text(self, text: str) -> str:
        text = re.sub(r"[^a-zA-Z–∞-—è–ê-–Ø—ë–Å\d\s!?.,;:]+", "", text)
        return text.lower().strip()