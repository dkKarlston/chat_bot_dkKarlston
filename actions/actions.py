import spacy
from deep_translator import GoogleTranslator
from rasa_sdk import Action, Tracker
from rasa_sdk.executor import CollectingDispatcher
from typing import Text, Dict, List, Any  # –î–æ–±–∞–≤–ª—è–µ–º —Ç–∏–ø—ã

# –ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–µ–π spaCy
nlp_ru = spacy.load("ru_core_news_sm")
nlp_en = spacy.load("en_core_web_sm")


class ActionLogDialog(Action):
    def name(self) -> Text:  
        return "action_log_dialog"

    def run(self,
            dispatcher: CollectingDispatcher,
            tracker: Tracker,
            domain: Dict[Text, Any]) -> List[Dict[Text, Any]]:  

        user_input = tracker.latest_message.get("text", "")
        bot_response = tracker.get_last_bot_utterance().get("text", "")

        try:
            with open("chat_log.txt", "a", encoding="utf-8") as log_file:
                log_file.write(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_input}\n–ë–æ—Ç: {bot_response}\n\n")
            dispatcher.utter_message(text="–î–∏–∞–ª–æ–≥ –∑–∞–ø–∏—Å–∞–Ω –≤ –∂—É—Ä–Ω–∞–ª üìù")
        except Exception as e:
            dispatcher.utter_message(text="–û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –≤ –∂—É—Ä–Ω–∞–ª")

        return []


class ActionLemmatizeText(Action):
    def name(self) -> Text: 
        return "action_lemmatize_text"

    def run(self,
            dispatcher: CollectingDispatcher,
            tracker: Tracker,
            domain: Dict[Text, Any]) -> List[Dict[Text, Any]]:  

        text = tracker.latest_message.get("text", "")

        if not text:
            dispatcher.utter_message(text="–ù–µ –ø–æ–ª—É—á–∏–ª —Ç–µ–∫—Å—Ç –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏")
            return []

        try:
            
            translator = GoogleTranslator(source='auto', target='en')
            translated = translator.translate(text)

            # –õ–µ–º–º–∞—Ç–∏–∑–∞—Ü–∏—è
            doc = nlp_en(translated)
            lemmas = " ".join([token.lemma_ for token in doc])

            dispatcher.utter_message(
                text=f"üîç –†–µ–∑—É–ª—å—Ç–∞—Ç –ª–µ–º–º–∞—Ç–∏–∑–∞—Ü–∏–∏:\n"
                     f"–û—Ä–∏–≥–∏–Ω–∞–ª: {text}\n"
                     f"–õ–µ–º–º—ã (EN): {lemmas}"
            )

        except Exception as e:
            dispatcher.utter_message(text="–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–µ–∫—Å—Ç–∞ üòû")
            print(f"Lemmatization error: {str(e)}")

        return []

class ActionRespondGreet(Action):
    def name(self) -> Text:
        return "action_respond_greet"

    def run(self, dispatcher, tracker, domain):
       
        dispatcher.utter_message(response="utter_greet")
        return []

class ActionRespondGoodbye(Action):
    def name(self) -> Text:
        return "action_respond_goodbye"

    def run(self, dispatcher, tracker, domain):
        dispatcher.utter_message(text="–î–æ —Å–≤–∏–¥–∞–Ω–∏—è! –ë—ã–ª–æ –ø—Ä–∏—è—Ç–Ω–æ –ø–æ–º–æ—á—å.")
        return []
